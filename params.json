{"name":"cassandraMAP","tagline":"A JavaScript implementation of Cassandra's Map type based on JSON3.","body":"# cassandraMAP #\r\n\r\n![cassandraMAP Logo](http://s21.postimg.org/qvtt7xjqf/cassandra_MAP.png)\r\n\r\n**CassandraMAP** is a JavaScript implementation of Cassandra's Map type based on JSON3, compatible with a variety of platforms, including Internet Explorer 6, Opera 7, Safari 2, and Netscape 6. The current version is **0.1.0**.\r\n\r\n- [Development Version](http://static.jousst.com/js/cassandraMAP-0.1.0.js) *(32 KB; uncompressed with comments)*\r\n- [Production Version](http://static.jousst.com/js/cassandraMAP-0.1.0.min.js) *(8 KB; compressed)*\r\n\r\nThis code is based on [JSON 3](../bestiejs/json3), created by [bestiejs](../bestiejs).\r\n\r\n[Apache Cassandra](http://cassandra.apache.org/) is an open-source distributed database managment system designed to handle large amounts of data. Within its query language, [CQL](http://www.datastax.com/documentation/cql/3.1/cql/cql_using/about_cql_c.html), there is a [map](http://www.datastax.com/documentation/cql/3.0/cql/cql_using/use_map_t.html) data type, which is equivalent to a JavaScript object. In order to query a database with CQL, a JavaScript object must be encoded into a JSON-like string that uses single quotes instead of the JSON standard double quotes. **cassandraMAP** provides a reliable, yet simple, way to encode objects into CQL-compilant map strings and decode them back to objects.  \r\n\r\ncassandraMAP exposes two functions: `stringify()` for [serializing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/stringify) a JavaScript value to a CQL Map, and `parse()` for [producing](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/JSON/parse) a JavaScript value from a CQL Map source string. Note: the links provided above are based on the JSON specification, and are provided only for reference purposes; cassandraMAP **does not** produce JSON-compilant results.\r\n\r\nPortions of the date serialization code are adapted from the [`date-shim`](https://github.com/Yaffle/date-shim) project.\r\n\r\n# Usage #\r\n\r\n## Web Browsers\r\n\r\n    <script src=\"./path/to/cassandraMAP.js\"></script>\r\n    <script>\r\n      cassandraMAP.stringify({\"key\": \"value\"});\r\n      // => \"{'key':'value'}\"\r\n      JSON.parse(\"{'key':'value'}\");\r\n      // => {\"key\": \"value\"}\r\n    </script>\r\n\r\n### Asynchronous Module Loaders\r\n\r\nJust like JSON 3, cassandraMAP is defined as an [anonymous module](https://github.com/amdjs/amdjs-api/wiki/AMD#define-function-) for compatibility with [RequireJS](http://requirejs.org/), [`curl.js`](https://github.com/cujojs/curl), and other asynchronous module loaders.\r\n\r\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.10/require.js\"></script>\r\n    <script>\r\n      require({\r\n        \"paths\": {\r\n          \"cassandraMAP\": \"./path/to/cassandraMAP\"\r\n        }\r\n      }, [\"cassandraMAP\"], function (cassandraMAP) {\r\n        cassandraMAP.parse(\"[1, 2, 3]\");\r\n        // => [1, 2, 3]\r\n      });\r\n    </script>\r\n\r\nTo avoid issues with third-party scripts, **cassandraMAP is exported to the global scope even when used with a module loader**.\r\n\r\n## CommonJS Environments\r\n\r\n    var cassandraMAP = require(\"./path/to/cassandraMAP\");\r\n    cassandraMAP.parse(\"[1, 2, 3]\");\r\n    // => [1, 2, 3]\r\n\r\n## JavaScript Engines\r\n\r\n    load(\"./path/to/cassandraMAP.js\");\r\n    cassandraMAP.stringify({\"Hello\": 123, \"Good-bye\": 456}, [\"Hello\"], \"\\t\");\r\n    // => \"{\\n\\t'Hello': 123\\n}\"\r\n\r\n\r\n## Known Incompatibilities\r\n\r\n* Attempting to serialize the `arguments` object may produce inconsistent results across environments due to specification version differences. As a workaround, please convert the `arguments` object to an array first: `JSON.stringify([].slice.call(arguments, 0))`.\r\n\r\n## Required Native Methods\r\n\r\nJust like JSON 3, cassandraMAP assumes that the following methods exist and function as described in the ECMAScript specification:\r\n\r\n- The `Number`, `String`, `Array`, `Object`, `Date`, `SyntaxError`, and `TypeError` constructors.\r\n- `String.fromCharCode`\r\n- `Object#toString`\r\n- `Function#call`\r\n- `Math.floor`\r\n- `Number#toString`\r\n- `Date#valueOf`\r\n- `String.prototype`: `indexOf`, `charCodeAt`, `charAt`, `slice`.\r\n- `Array.prototype`: `push`, `pop`, `join`.\r\n\r\n# Contribute #\r\n\r\nIf youâ€™d like to contribute a feature or bug fix, you can [fork](https://help.github.com/fork-a-repo/) cassandraMAP, commit your changes, and [send a pull request](https://help.github.com/send-pull-requests/). Please make sure to update the unit tests in the `test` directory as well.\r\n\r\nAlternatively, you can use the [GitHub issue tracker](https://github.com/jcoc611/cassandraMAP/issues) to submit bug reports, feature requests, and questions, or send tweets to [@jcoc611](https://twitter.com/jcoc611).\r\n\r\ncassandraMAP is released under the [MIT License](http://kit.mit-license.org/).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}